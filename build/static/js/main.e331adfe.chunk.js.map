{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Person","name","number","handleDelete","onClick","Persons","persons","map","per","PersonForm","addPerson","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","value","onChange","type","Filter","newSearch","handleSearchChange","App","useState","setPersons","setNewName","setNewNumber","setNewSearch","useEffect","console","log","personService","initialNotes","catch","error","length","personsToShow","filter","person","toString","toLowerCase","includes","event","target","preventDefault","date","Date","toISOString","find","window","confirm","returnedPerson","concat","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e331adfe.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = \"/api/persons\"\r\n\r\nconst getAll = () => {\r\n    return (\r\n    axios\r\n      .get(baseUrl)\r\n      .then(response => response.data))\r\n}\r\n\r\nconst create = (newObject) => {\r\n    return (\r\n    axios\r\n      .post(baseUrl, newObject)\r\n      .then(response => response.data))\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    return (\r\n    axios\r\n      .put(`${baseUrl}/${id}`, newObject)\r\n      .then(response => response.data))\r\n} \r\n\r\n\r\nconst remove = (id) => {\r\n    return (\r\n    axios\r\n      .delete(`${baseUrl}/${id}`)\r\n      .then(response => response.data))\r\n} \r\n\r\nexport default {\r\n    getAll: getAll,\r\n    create: create,\r\n    update: update,\r\n    remove: remove\r\n}","import React, { useState, useEffect } from 'react'\n// import axios from \"axios\"\nimport personService from './services/persons'\n\nconst Person = ({name, number, handleDelete}) => {\n  return (<li id={name}>{name} {number} <button onClick={handleDelete(name)}>delete</button></li>)\n}\n\n\nconst Persons = ({persons, handleDelete}) => {\n  return(<ul>{persons.map(per => <Person name={per.name} number={per.number} handleDelete={handleDelete}/>)}</ul>)\n}\n\n\nconst PersonForm = ({addPerson, newName, handleNameChange, newNumber, handleNumberChange}) => {\nreturn(\n  <div>\n    <form onSubmit={addPerson}>\n    <div>\n      name: <input value={newName} onChange={handleNameChange}/>\n      <br/>\n      number: <input value={newNumber} onChange={handleNumberChange}/>\n    </div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n    </form>\n  </div>\n  )\n}\n\n\nconst Filter = ({newSearch, handleSearchChange}) => {\nreturn(\n  <div>\n    filter shown with<input onChange={handleSearchChange} value={newSearch}/>\n  </div>\n)\n}\n\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [newSearch, setNewSearch] = useState('')\n\n  // [\n  //   { name: 'Arto Hellas', number: '040-123456' },\n  //   { name: 'Ada Lovelace', number: '39-44-5323523' },\n  //   { name: 'Dan Abramov', number: '12-43-234345' },\n  //   { name: 'Mary Poppendieck', number: '39-23-6423122' }\n  // ]\n\n  useEffect(() => {\n    console.log('effect')\n    personService\n      .getAll()\n      .then(initialNotes => {\n        console.log('fetched notes!')\n        setPersons(initialNotes)\n      })\n      .catch(error => {\n        console.log('failed getting data')\n      })\n  }, [])\n  console.log('render', persons.length, 'persons')\n\n\n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }  \n\n  const handleSearchChange = (event) => {\n   setNewSearch(event.target.value)\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const newObject = {\n      date: new Date().toISOString(),\n      name: newName,\n      number: newNumber,\n      id: newName\n    }\n\n    if(persons.find(per => per.name === newName)){\n      if(window.confirm(`${newName} has already been added to phonebook, replace the old number with a new one?`)){\n      personService\n        .update(persons.find(per => per.name === newName).id, newObject)\n        .then(returnedPerson => {\n          console.log('updated!')\n          setPersons(persons.map(per => per.name === newName ? returnedPerson: per))\n          setNewName('')\n          setNewNumber('')\n        })\n        .catch(error => {\n          console.log(error)\n          console.log('failed updating')\n        })\n      }\n    }\n    else{\n    personService\n      .create(newObject)\n      .then(returnedPerson => {\n        console.log('added!')\n        setPersons(persons.concat(returnedPerson))\n        setNewName('')\n        setNewNumber('')\n      }) \n      .catch(error => {\n        console.log(error)\n        console.log('failed adding')\n      })\n    }\n  }\n\n  const handleDelete = (name) => {\n    return ((event) => { \n    event.preventDefault()\n\n    if(window.confirm(`Delete ${name} ?`)){\n      personService\n        .remove(persons.find(per => per.name === name).id)\n        .then(returnedPerson => {\n          console.log(`deleted ${name}`)\n          setPersons(persons.filter(per => per.name !== name))\n        })\n        .catch(error=>{\n          console.log(error)\n          console.log('failed deleting')\n        })\n    }\n  })\n}\n\n  const personsToShow = persons.filter(person => person.name.toString().toLowerCase().includes(newSearch.toString().toLowerCase()))\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n\n      <Filter newSearch={newSearch} handleSearchChange={handleSearchChange}/>\n\n      <h3>Add a new</h3>\n      <PersonForm addPerson={addPerson} newName={newName} handleNameChange={handleNameChange} newNumber={newNumber} handleNumberChange={handleNumberChange} />\n      \n      <h2>Numbers</h2>\n      <Persons persons={personsToShow} handleDelete={handleDelete}/>\n      \n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}